/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a strict user-ownership model for user profiles and module progress, while allowing public read access to module definitions.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile information. Only the user can access their own document.
 * - /users/{userId}/moduleProgress/{moduleId}: Stores the progress of a user in a specific module. Access is restricted to the owning user.
 * - /modules/{moduleId}: Stores module information, accessible to all users.
 *
 * Key Security Decisions:
 * - User data is strictly private and accessible only to the authenticated user.
 * - Module data is public and read-only.
 * - Listing of users is disallowed for privacy.
 * - The rules rely on path-based ownership, eliminating the need for costly `get()` calls to determine access rights.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile documents.
     * @path /users/{userId}
     * @allow (create) - If the user ID in the path matches the authenticated user's ID.
     * @allow (get, update, delete) - If the user ID in the path matches the authenticated user's ID.
     * @deny (create) - If the user ID in the path does not match the authenticated user's ID.
     * @deny (get, update, delete) - If the user ID in the path does not match the authenticated user's ID.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to user module progress documents.
     * @path /users/{userId}/moduleProgress/{moduleId}
     * @allow (create, get, update, delete, list) - If the user ID in the path matches the authenticated user's ID.
     * @deny (create, get, update, delete, list) - If the user ID in the path does not match the authenticated user's ID.
     * @principle Restricts access to a user's own module progress data.
     */
    match /users/{userId}/moduleProgress/{moduleId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to module documents.
     * @path /modules/{moduleId}
     * @allow (get, list) - Public read access for all users.
     * @deny (create, update, delete) - Write access is denied to all users.
     * @principle Allows public read access while restricting write access to modules.
     */
    match /modules/{moduleId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }
  }
}